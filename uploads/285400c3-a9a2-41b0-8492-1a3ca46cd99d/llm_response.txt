{
    "code": "\nimport os\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport json\nimport io # Required for capturing df.info() output\n\n# Define paths and URL\nOUTPUT_DIR = \"uploads/285400c3-a9a2-41b0-8492-1a3ca46cd99d\"\nDATA_FILE = os.path.join(OUTPUT_DIR, \"data.csv\")\nMETADATA_FILE = os.path.join(OUTPUT_DIR, \"metadata.txt\")\nURL = \"https://en.wikipedia.org/wiki/List_of_highest-grossing_films\"\n\n# Create output directory if it doesn't exist\nos.makedirs(OUTPUT_DIR, exist_ok=True)\n\n# Scrape the table\ntry:\n    tables = pd.read_html(URL, match=\"Worldwide gross\")\n    if not tables:\n        df = pd.DataFrame()\n    else:\n        df = tables[0]\n\n        df.columns = [re.sub(r'\\\\s*\\\\d+$', '', col).strip() for col in df.columns]\n\n        if 'Peak (at time of release)' in df.columns:\n            df = df.rename(columns={'Peak (at time of release)': 'Peak'})\n\n        required_cols = ['Rank', 'Film', 'Worldwide gross', 'Year', 'Peak']\n        df = df[[col for col in required_cols if col in df.columns]].copy()\n\n        if 'Worldwide gross' in df.columns:\n            df['Worldwide gross'] = df['Worldwide gross'].astype(str).str.replace('$', '', regex=False).str.replace(',', '', regex=False)\n            df['Worldwide gross'] = df['Worldwide gross'].apply(lambda x: re.sub(r'\\\\[.*\\\\]', '', x)).str.strip()\n            df['Worldwide gross'] = pd.to_numeric(df['Worldwide gross'], errors='coerce')\n            df = df.dropna(subset=['Worldwide gross'])\n\n        if 'Rank' in df.columns:\n            df['Rank'] = df['Rank'].astype(str).apply(lambda x: re.sub(r'[^\\\\d]+', '', x)).str.strip()\n            df['Rank'] = pd.to_numeric(df['Rank'], errors='coerce')\n\n        if 'Peak' in df.columns:\n            df['Peak'] = df['Peak'].astype(str).apply(lambda x: re.sub(r'[^\\\\d]+', '', x)).str.strip()\n            df['Peak'] = pd.to_numeric(df['Peak'], errors='coerce')\n\n        if 'Year' in df.columns:\n            df['Year'] = df['Year'].astype(str).apply(lambda x: re.sub(r'\\\\[.*\\\\]', '', x)).str.strip()\n            df['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n\n        df = df.dropna(subset=['Rank', 'Worldwide gross', 'Year'])\n        if 'Peak' in df.columns:\n            df = df.dropna(subset=['Peak'])\n\nexcept Exception as e:\n    import sys\n    print(f\"Error during data scraping or initial processing: {e}\", file=sys.stderr)\n    df = pd.DataFrame()\n\ndf.to_csv(DATA_FILE, index=False)\n\nwith open(METADATA_FILE, \"w\") as f:\n    f.write(f\"Data File Path: {DATA_FILE}\\\\n\\\\n\")\n    f.write(\"DataFrame Info:\\\\n\")\n    buffer = io.StringIO()\n    df.info(buf=buffer)\n    f.write(buffer.getvalue())\n    \n    f.write(\"\\\\n\\\\nColumn Names:\\\\n\")\n    f.write(str(df.columns.tolist()))\n    f.write(\"\\\\n\\\\nFirst 5 Rows:\\\\n\")\n    f.write(df.head().to_string())\n    f.write(\"\\\\n\\\\nANSWER_FORMAT: JSON array of strings\\\\n\")\n",
    "libraries": [
        "pandas",
        "beautifulsoup4"
    ],
    "questions": [
        "How many $2 bn movies were released before 2000?",
        "Which is the earliest film that grossed over $1.5 bn?",
        "What's the correlation between the Rank and Peak?",
        "Draw a scatterplot of Rank and Peak along with a dotted red regression line through it. Return as a base-64 encoded data URI, \"data:image/png;base66,iVBORw0KG...\" under 100,000 bytes."
    ],
    "comment": "Step-3: Getting scrap code and metadata from llm. Tries count = %d 0"
}